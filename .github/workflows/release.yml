name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: oxirs-fuseki
            asset_name: oxirs-fuseki-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: oxide
            asset_name: oxide-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: oxirs-fuseki
            asset_name: oxirs-fuseki-macos-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: oxide
            asset_name: oxide-macos-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: oxirs-fuseki.exe
            asset_name: oxirs-fuseki-windows-x86_64.exe
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: oxide.exe
            asset_name: oxide-windows-x86_64.exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare binary
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          if [[ "${{ matrix.binary_name }}" == "oxirs-fuseki.exe" ]]; then
            cp target/${{ matrix.target }}/release/oxirs-fuseki.exe ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/oxide.exe ${{ matrix.asset_name }}
          fi
        else
          if [[ "${{ matrix.binary_name }}" == "oxirs-fuseki" ]]; then
            cp target/${{ matrix.target }}/release/oxirs-fuseki ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/oxide ${{ matrix.asset_name }}
          fi
          chmod +x ${{ matrix.asset_name }}
        fi
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: oxirs/oxirs-fuseki
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max