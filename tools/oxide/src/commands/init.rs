//! Dataset initialization command

use super::CommandResult;
use oxirs_core::store::Store;
use std::fs;
use std::path::PathBuf;

/// Initialize a new knowledge graph dataset
pub async fn run(name: String, format: String, location: Option<PathBuf>) -> CommandResult {
    println!("Initializing dataset '{}' with format '{}'", name, format);

    let dataset_path = location.unwrap_or_else(|| PathBuf::from(&name));

    // Validate format
    match format.as_str() {
        "tdb2" | "memory" => {}
        _ => {
            return Err(format!(
                "Unsupported format '{}'. Supported formats: tdb2, memory",
                format
            )
            .into());
        }
    }

    // Create directory structure if needed
    if format == "tdb2" {
        if dataset_path.exists() {
            return Err(format!(
                "Dataset directory '{}' already exists",
                dataset_path.display()
            )
            .into());
        }

        fs::create_dir_all(&dataset_path)?;
        println!("Created dataset directory: {}", dataset_path.display());
    }

    // Initialize storage backend
    let _store = match format.as_str() {
        "tdb2" => Store::open(&dataset_path)?,
        "memory" => Store::new()?,
        _ => unreachable!(),
    };

    // Create configuration file
    let config_path = dataset_path.join("oxirs.toml");
    let config_content = create_default_config(&name, &format, &dataset_path)?;
    fs::write(&config_path, config_content)?;
    println!("Created configuration file: {}", config_path.display());

    println!(
        "Dataset '{}' successfully initialized at {}",
        name,
        dataset_path.display()
    );
    println!("Storage format: {}", format);
    println!("Configuration: {}", config_path.display());

    Ok(())
}

/// Create default configuration file content
fn create_default_config(
    name: &str,
    format: &str,
    path: &PathBuf,
) -> Result<String, Box<dyn std::error::Error>> {
    let config = format!(
        r#"# OxiRS Dataset Configuration
# Generated by oxide init

[dataset]
name = "{}"
format = "{}"
location = "{}"

[server]
# Default server configuration
port = 3030
host = "localhost"
cors_enabled = true

[endpoints]
# SPARQL endpoints
query = "/sparql"
update = "/update"
graph_store = "/data"

# GraphQL endpoint (optional)
graphql = "/graphql"
graphiql = "/graphiql"

[logging]
level = "info"
format = "json"

[features]
# Optional features
reasoning = false
validation = false
text_search = false
vector_search = false
"#,
        name,
        format,
        path.display()
    );

    Ok(config)
}
